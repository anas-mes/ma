/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MedicalHistoryService } from "../medicalHistory.service";
import { MedicalHistoryCreateInput } from "./MedicalHistoryCreateInput";
import { MedicalHistory } from "./MedicalHistory";
import { MedicalHistoryFindManyArgs } from "./MedicalHistoryFindManyArgs";
import { MedicalHistoryWhereUniqueInput } from "./MedicalHistoryWhereUniqueInput";
import { MedicalHistoryUpdateInput } from "./MedicalHistoryUpdateInput";

export class MedicalHistoryControllerBase {
  constructor(protected readonly service: MedicalHistoryService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MedicalHistory })
  async createMedicalHistory(
    @common.Body() data: MedicalHistoryCreateInput
  ): Promise<MedicalHistory> {
    return await this.service.createMedicalHistory({
      data: {
        ...data,

        doctor: data.doctor
          ? {
              connect: data.doctor,
            }
          : undefined,

        patient: data.patient
          ? {
              connect: data.patient,
            }
          : undefined,
      },
      select: {
        condition: true,
        createdAt: true,
        description: true,

        doctor: {
          select: {
            id: true,
          },
        },

        endDate: true,
        id: true,

        patient: {
          select: {
            id: true,
          },
        },

        startDate: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MedicalHistory] })
  @ApiNestedQuery(MedicalHistoryFindManyArgs)
  async medicalHistories(
    @common.Req() request: Request
  ): Promise<MedicalHistory[]> {
    const args = plainToClass(MedicalHistoryFindManyArgs, request.query);
    return this.service.medicalHistories({
      ...args,
      select: {
        condition: true,
        createdAt: true,
        description: true,

        doctor: {
          select: {
            id: true,
          },
        },

        endDate: true,
        id: true,

        patient: {
          select: {
            id: true,
          },
        },

        startDate: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MedicalHistory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async medicalHistory(
    @common.Param() params: MedicalHistoryWhereUniqueInput
  ): Promise<MedicalHistory | null> {
    const result = await this.service.medicalHistory({
      where: params,
      select: {
        condition: true,
        createdAt: true,
        description: true,

        doctor: {
          select: {
            id: true,
          },
        },

        endDate: true,
        id: true,

        patient: {
          select: {
            id: true,
          },
        },

        startDate: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MedicalHistory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMedicalHistory(
    @common.Param() params: MedicalHistoryWhereUniqueInput,
    @common.Body() data: MedicalHistoryUpdateInput
  ): Promise<MedicalHistory | null> {
    try {
      return await this.service.updateMedicalHistory({
        where: params,
        data: {
          ...data,

          doctor: data.doctor
            ? {
                connect: data.doctor,
              }
            : undefined,

          patient: data.patient
            ? {
                connect: data.patient,
              }
            : undefined,
        },
        select: {
          condition: true,
          createdAt: true,
          description: true,

          doctor: {
            select: {
              id: true,
            },
          },

          endDate: true,
          id: true,

          patient: {
            select: {
              id: true,
            },
          },

          startDate: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MedicalHistory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMedicalHistory(
    @common.Param() params: MedicalHistoryWhereUniqueInput
  ): Promise<MedicalHistory | null> {
    try {
      return await this.service.deleteMedicalHistory({
        where: params,
        select: {
          condition: true,
          createdAt: true,
          description: true,

          doctor: {
            select: {
              id: true,
            },
          },

          endDate: true,
          id: true,

          patient: {
            select: {
              id: true,
            },
          },

          startDate: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
