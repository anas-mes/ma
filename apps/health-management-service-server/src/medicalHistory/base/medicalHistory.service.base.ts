/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  MedicalHistory as PrismaMedicalHistory,
  Doctor as PrismaDoctor,
  Patient as PrismaPatient,
} from "@prisma/client";

export class MedicalHistoryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.MedicalHistoryCountArgs, "select">
  ): Promise<number> {
    return this.prisma.medicalHistory.count(args);
  }

  async medicalHistories(
    args: Prisma.MedicalHistoryFindManyArgs
  ): Promise<PrismaMedicalHistory[]> {
    return this.prisma.medicalHistory.findMany(args);
  }
  async medicalHistory(
    args: Prisma.MedicalHistoryFindUniqueArgs
  ): Promise<PrismaMedicalHistory | null> {
    return this.prisma.medicalHistory.findUnique(args);
  }
  async createMedicalHistory(
    args: Prisma.MedicalHistoryCreateArgs
  ): Promise<PrismaMedicalHistory> {
    return this.prisma.medicalHistory.create(args);
  }
  async updateMedicalHistory(
    args: Prisma.MedicalHistoryUpdateArgs
  ): Promise<PrismaMedicalHistory> {
    return this.prisma.medicalHistory.update(args);
  }
  async deleteMedicalHistory(
    args: Prisma.MedicalHistoryDeleteArgs
  ): Promise<PrismaMedicalHistory> {
    return this.prisma.medicalHistory.delete(args);
  }

  async getDoctor(parentId: string): Promise<PrismaDoctor | null> {
    return this.prisma.medicalHistory
      .findUnique({
        where: { id: parentId },
      })
      .doctor();
  }

  async getPatient(parentId: string): Promise<PrismaPatient | null> {
    return this.prisma.medicalHistory
      .findUnique({
        where: { id: parentId },
      })
      .patient();
  }
}
