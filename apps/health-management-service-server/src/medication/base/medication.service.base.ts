/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Medication as PrismaMedication,
  Patient as PrismaPatient,
} from "@prisma/client";

export class MedicationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.MedicationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.medication.count(args);
  }

  async medications(
    args: Prisma.MedicationFindManyArgs
  ): Promise<PrismaMedication[]> {
    return this.prisma.medication.findMany(args);
  }
  async medication(
    args: Prisma.MedicationFindUniqueArgs
  ): Promise<PrismaMedication | null> {
    return this.prisma.medication.findUnique(args);
  }
  async createMedication(
    args: Prisma.MedicationCreateArgs
  ): Promise<PrismaMedication> {
    return this.prisma.medication.create(args);
  }
  async updateMedication(
    args: Prisma.MedicationUpdateArgs
  ): Promise<PrismaMedication> {
    return this.prisma.medication.update(args);
  }
  async deleteMedication(
    args: Prisma.MedicationDeleteArgs
  ): Promise<PrismaMedication> {
    return this.prisma.medication.delete(args);
  }

  async getPatient(parentId: string): Promise<PrismaPatient | null> {
    return this.prisma.medication
      .findUnique({
        where: { id: parentId },
      })
      .patient();
  }
}
