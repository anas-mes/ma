/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Medication } from "./Medication";
import { MedicationCountArgs } from "./MedicationCountArgs";
import { MedicationFindManyArgs } from "./MedicationFindManyArgs";
import { MedicationFindUniqueArgs } from "./MedicationFindUniqueArgs";
import { CreateMedicationArgs } from "./CreateMedicationArgs";
import { UpdateMedicationArgs } from "./UpdateMedicationArgs";
import { DeleteMedicationArgs } from "./DeleteMedicationArgs";
import { Patient } from "../../patient/base/Patient";
import { MedicationService } from "../medication.service";
@graphql.Resolver(() => Medication)
export class MedicationResolverBase {
  constructor(protected readonly service: MedicationService) {}

  async _medicationsMeta(
    @graphql.Args() args: MedicationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Medication])
  async medications(
    @graphql.Args() args: MedicationFindManyArgs
  ): Promise<Medication[]> {
    return this.service.medications(args);
  }

  @graphql.Query(() => Medication, { nullable: true })
  async medication(
    @graphql.Args() args: MedicationFindUniqueArgs
  ): Promise<Medication | null> {
    const result = await this.service.medication(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Medication)
  async createMedication(
    @graphql.Args() args: CreateMedicationArgs
  ): Promise<Medication> {
    return await this.service.createMedication({
      ...args,
      data: {
        ...args.data,

        patient: args.data.patient
          ? {
              connect: args.data.patient,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Medication)
  async updateMedication(
    @graphql.Args() args: UpdateMedicationArgs
  ): Promise<Medication | null> {
    try {
      return await this.service.updateMedication({
        ...args,
        data: {
          ...args.data,

          patient: args.data.patient
            ? {
                connect: args.data.patient,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Medication)
  async deleteMedication(
    @graphql.Args() args: DeleteMedicationArgs
  ): Promise<Medication | null> {
    try {
      return await this.service.deleteMedication(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Patient, {
    nullable: true,
    name: "patient",
  })
  async getPatient(
    @graphql.Parent() parent: Medication
  ): Promise<Patient | null> {
    const result = await this.service.getPatient(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
