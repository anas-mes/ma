/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MedicationService } from "../medication.service";
import { MedicationCreateInput } from "./MedicationCreateInput";
import { Medication } from "./Medication";
import { MedicationFindManyArgs } from "./MedicationFindManyArgs";
import { MedicationWhereUniqueInput } from "./MedicationWhereUniqueInput";
import { MedicationUpdateInput } from "./MedicationUpdateInput";

export class MedicationControllerBase {
  constructor(protected readonly service: MedicationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Medication })
  async createMedication(
    @common.Body() data: MedicationCreateInput
  ): Promise<Medication> {
    return await this.service.createMedication({
      data: {
        ...data,

        patient: data.patient
          ? {
              connect: data.patient,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        dosage: true,
        id: true,
        name: true,

        patient: {
          select: {
            id: true,
          },
        },

        prescriptionDate: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Medication] })
  @ApiNestedQuery(MedicationFindManyArgs)
  async medications(@common.Req() request: Request): Promise<Medication[]> {
    const args = plainToClass(MedicationFindManyArgs, request.query);
    return this.service.medications({
      ...args,
      select: {
        createdAt: true,
        dosage: true,
        id: true,
        name: true,

        patient: {
          select: {
            id: true,
          },
        },

        prescriptionDate: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Medication })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async medication(
    @common.Param() params: MedicationWhereUniqueInput
  ): Promise<Medication | null> {
    const result = await this.service.medication({
      where: params,
      select: {
        createdAt: true,
        dosage: true,
        id: true,
        name: true,

        patient: {
          select: {
            id: true,
          },
        },

        prescriptionDate: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Medication })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMedication(
    @common.Param() params: MedicationWhereUniqueInput,
    @common.Body() data: MedicationUpdateInput
  ): Promise<Medication | null> {
    try {
      return await this.service.updateMedication({
        where: params,
        data: {
          ...data,

          patient: data.patient
            ? {
                connect: data.patient,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          dosage: true,
          id: true,
          name: true,

          patient: {
            select: {
              id: true,
            },
          },

          prescriptionDate: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Medication })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMedication(
    @common.Param() params: MedicationWhereUniqueInput
  ): Promise<Medication | null> {
    try {
      return await this.service.deleteMedication({
        where: params,
        select: {
          createdAt: true,
          dosage: true,
          id: true,
          name: true,

          patient: {
            select: {
              id: true,
            },
          },

          prescriptionDate: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
